apiVersion: apps/v1
kind: Deployment
metadata:
  name: policy-service
  namespace: exoper
  labels:
    app: policy-service
    component: backend
    version: v1.0.0
    environment: production
    tier: application
    managed-by: kubernetes
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/description: "Exoper Policy Service Deployment"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: policy-service
      component: backend
  template:
    metadata:
      labels:
        app: policy-service
        component: backend
        version: v1.0.0
        environment: production
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8085"
        prometheus.io/path: "/metrics"
        config.kubernetes.io/depends-on: "configmap/policy-service-config,secret/policy-service-secrets"
    spec:
      serviceAccountName: policy-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - policy-service
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
              - key: node-type
                operator: In
                values:
                - application
      tolerations:
      - key: "application-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      initContainers:
      - name: config-validator
        image: exoper/policy-service:1.0.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Validating configuration..."
          /app/policy-service --config=/etc/config/policy.yaml --validate-config
          echo "Configuration validation completed"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secrets-volume
          mountPath: /etc/secrets
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      - name: database-migration
        image: exoper/policy-service:1.0.0
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Running database migrations..."
          /app/policy-service --config=/etc/config/policy.yaml --migrate
          echo "Database migrations completed"
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: policy-service-secrets
              key: db-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: policy-service-secrets
              key: redis-password
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secrets-volume
          mountPath: /etc/secrets
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

      containers:
      - name: policy-service
        image: exoper/policy-service:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        - name: metrics
          containerPort: 8085
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: SERVICE_NAME
          value: "exoper-policy-service"
        - name: SERVICE_VERSION
          value: "1.0.0"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: policy-service-secrets
              key: db-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: policy-service-secrets
              key: redis-password
        - name: TLS_CERT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: policy-service-secrets
              key: tls-cert-password
              optional: true
        command: ["/app/policy-service"]
        args:
        - "--config=/etc/config/policy.yaml"
        - "--env=production"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "2000m"
            ephemeral-storage: "5Gi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secrets-volume
          mountPath: /etc/secrets
          readOnly: true
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: tls-private
          mountPath: /etc/ssl/private
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: policy-service-config
          defaultMode: 0644
      - name: secrets-volume
        secret:
          secretName: policy-service-secrets
          defaultMode: 0600
      - name: tls-certs
        secret:
          secretName: policy-service-tls-certs
          defaultMode: 0644
      - name: tls-private
        secret:
          secretName: policy-service-tls-private
          defaultMode: 0600
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: cache-volume
        emptyDir:
          sizeLimit: 5Gi
      - name: logs-volume
        emptyDir:
          sizeLimit: 2Gi
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      imagePullSecrets:
      - name: exoper-registry-secret

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: policy-service
  namespace: exoper
  labels:
    app: policy-service
    component: serviceaccount
    version: v1.0.0
    environment: production
  annotations:
    kubernetes.io/description: "Service Account for Exoper Policy Service"
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: policy-service-role
  namespace: exoper
  labels:
    app: policy-service
    component: rbac
    version: v1.0.0
    environment: production
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: policy-service-rolebinding
  namespace: exoper
  labels:
    app: policy-service
    component: rbac
    version: v1.0.0
    environment: production
subjects:
- kind: ServiceAccount
  name: policy-service
  namespace: exoper
roleRef:
  kind: Role
  name: policy-service-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: policy-service-pdb
  namespace: exoper
  labels:
    app: policy-service
    component: pdb
    version: v1.0.0
    environment: production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: policy-service
      component: backend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: policy-service-hpa
  namespace: exoper
  labels:
    app: policy-service
    component: hpa
    version: v1.0.0
    environment: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: policy-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
