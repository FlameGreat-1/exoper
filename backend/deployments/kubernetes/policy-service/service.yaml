apiVersion: v1
kind: Service
metadata:
  name: policy-service
  namespace: exoper
  labels:
    app: policy-service
    component: service
    version: v1.0.0
    environment: production
    tier: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    prometheus.io/path: "/metrics"
    kubernetes.io/description: "Exoper Policy Service - Main API Service"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: grpc
    protocol: TCP
  - name: metrics
    port: 8085
    targetPort: metrics
    protocol: TCP
  selector:
    app: policy-service
    component: backend
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: policy-service-headless
  namespace: exoper
  labels:
    app: policy-service
    component: headless-service
    version: v1.0.0
    environment: production
    tier: backend
  annotations:
    kubernetes.io/description: "Headless service for policy service discovery"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: grpc
    protocol: TCP
  selector:
    app: policy-service
    component: backend
  publishNotReadyAddresses: false

---
apiVersion: v1
kind: Service
metadata:
  name: policy-service-internal
  namespace: exoper
  labels:
    app: policy-service
    component: internal-service
    version: v1.0.0
    environment: production
    tier: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    kubernetes.io/description: "Internal service for policy service communication"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: grpc
    protocol: TCP
  selector:
    app: policy-service
    component: backend
  loadBalancerSourceRanges:
  - "10.0.0.0/8"
  - "172.16.0.0/12"
  - "192.168.0.0/16"

---
apiVersion: v1
kind: Service
metadata:
  name: policy-service-external
  namespace: exoper
  labels:
    app: policy-service
    component: external-service
    version: v1.0.0
    environment: production
    tier: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
    kubernetes.io/description: "External facing service for policy API"
spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: grpc-tls
    port: 9443
    targetPort: grpc
    protocol: TCP
  selector:
    app: policy-service
    component: backend
  externalTrafficPolicy: Local

---
apiVersion: v1
kind: Service
metadata:
  name: policy-service-metrics
  namespace: exoper
  labels:
    app: policy-service
    component: metrics-service
    version: v1.0.0
    environment: production
    tier: observability
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    prometheus.io/path: "/metrics"
    kubernetes.io/description: "Metrics endpoint for Prometheus scraping"
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 8085
    targetPort: metrics
    protocol: TCP
  selector:
    app: policy-service
    component: backend

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: policy-service-ingress
  namespace: exoper
  labels:
    app: policy-service
    component: ingress
    version: v1.0.0
    environment: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.exoper.com,https://admin.exoper.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type,Authorization,X-Tenant-ID,X-Request-ID"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - api.exoper.com
    - policy.exoper.com
    secretName: policy-service-tls
  rules:
  - host: api.exoper.com
    http:
      paths:
      - path: /v1/policy
        pathType: Prefix
        backend:
          service:
            name: policy-service
            port:
              number: 8080
  - host: policy.exoper.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: policy-service
            port:
              number: 8080

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: policy-service-network-policy
  namespace: exoper
  labels:
    app: policy-service
    component: network-policy
    version: v1.0.0
    environment: production
spec:
  podSelector:
    matchLabels:
      app: policy-service
      component: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: exoper
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: observability
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 8085
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: exoper
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 8181
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
